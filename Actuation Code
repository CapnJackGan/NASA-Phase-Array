//This code is written for the Arduino DUE
//The purpose of this code is to take a user defined polar coordinate or preset and reconfigure an array to match those coordinates
/*Notable functions:
StepperMotor (int StepCount, const int dirPin, const int stepPin )
see Pinout chart for pins
*/
int DELAY=20; //delay between steps in miliseconds

/*Code Structure:
-Variables
-Pinouts
-Setup
   -Pin Setup
   -Initiate Interupts
   -Serial Setup
   -Call StartUp
-Interupt Functions
-Define Interupt Function
-StepperMotor Function
-ExecuteSteps Function
   -Frequency Presets
   -Run to positions/control loop
-StartUp Function
*/

//Serial communications: Baud rate = 250000

struct Encoder {
  long Counter;
  char State;
};

//Variable encoder states
Encoder Radial5 = {10000, 'A'};
Encoder Radial6 = {10000, 'A'};
Encoder Axial5 = {10000, 'A'};
Encoder Axial6 = {10000, 'A'};

//Set Pins, see pinout chart
const int Ring5RadialSteps = 52; //Ring 5 Radial
const int Ring5RadialDir = 53;
const int Ring5RadialSleep = 51;
const int Ring5RadialEncoderChannelA = 49;
const int Ring5RadialEncoderChannelB = 50;

const int Ring5AxialSteps = 42; //Ring 5 Axial
const int Ring5AxialDir = 43;
const int Ring5AxialSleep = 41;
const int Ring5AxialEncoderChannelA = 44;
const int Ring5AxialEncoderChannelB = 45;
const int Ring5AxialEncoderIndex = 46;

const int Ring6RadialSteps = 12; //Ring 6 Radial
const int Ring6RadialDir = 11;
const int Ring6RadialSleep = 13;
const int Ring6RadialEncoderChannelA = 9;
const int Ring6RadialEncoderChannelB = 10;

const int Ring6AxialSteps = 3; //Ring 6 Axial
const int Ring6AxialDir = 2;
const int Ring6AxialSleep = 4;
const int Ring6AxialEncoderChannelA = 5;
const int Ring6AxialEncoderChannelB = 6;
const int Ring6AxialEncoderIndex = 7;

void setup() {
  //configure pins to input or output
  pinMode(Ring5RadialSteps, OUTPUT);
  pinMode(Ring5RadialDir, OUTPUT);
  pinMode(Ring5AxialSteps, OUTPUT);
  pinMode(Ring5AxialDir, OUTPUT);
  pinMode(Ring5RadialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring5RadialEncoderChannelB, INPUT_PULLUP);
  pinMode(Ring5AxialEncoderIndex, INPUT_PULLUP);
  pinMode(Ring5AxialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring5AxialEncoderChannelB, INPUT_PULLUP);
  pinMode(Ring6RadialSteps, OUTPUT);
  pinMode(Ring6RadialDir, OUTPUT);
  pinMode(Ring6AxialSteps, OUTPUT);
  pinMode(Ring6AxialDir, OUTPUT);
  pinMode(Ring6RadialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring6RadialEncoderChannelB, INPUT_PULLUP);
  pinMode(Ring6AxialEncoderIndex, INPUT_PULLUP);
  pinMode(Ring6AxialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring6AxialEncoderChannelB, INPUT_PULLUP);
  
  //initiate encoder interupts
  attachInterrupt(digitalPinToInterrupt(Ring5RadialEncoderChannelA), Ring5RadialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5RadialEncoderChannelB), Ring5RadialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5AxialEncoderChannelA), Ring5AxialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5AxialEncoderChannelB), Ring5AxialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6RadialEncoderChannelA), Ring6RadialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6RadialEncoderChannelB), Ring6RadialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6AxialEncoderChannelA), Ring6AxialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6AxialEncoderChannelB), Ring6AxialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5AxialEncoderIndex), Home5, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6AxialEncoderIndex), Hello, CHANGE);

  //Iniatiate serial port
  Serial.begin(250000);

//Launch Startup Sequence
  //StartUp();
}

//Encoder interupts
int Homed5 = 0;
int Homed6 = 0;

void Home5(){
  Homed5=1;
}

void Hello(){
  Serial.println("Hello");
}
void Ring5RadialEncoderAInterrupt() {
  Radial5 = EncoderInterupt(Radial5.State, Ring5RadialEncoderChannelA, Ring5RadialEncoderChannelB, Radial5.Counter);
}

void Ring5RadialEncoderBInterrupt() { 
  Radial5 = EncoderInterupt(Radial5.State, Ring5RadialEncoderChannelA, Ring5RadialEncoderChannelB, Radial5.Counter);
}

void Ring5AxialEncoderAInterrupt() {
  Axial5 = EncoderInterupt(Axial5.State, Ring5AxialEncoderChannelA, Ring5AxialEncoderChannelB, Axial5.Counter);
}

void Ring5AxialEncoderBInterrupt() {
  Axial5 = EncoderInterupt(Axial5.State, Ring5AxialEncoderChannelA, Ring5AxialEncoderChannelB, Axial5.Counter);
}

//Ring 2 interupts
void Ring6RadialEncoderAInterrupt() {
  Radial6 = EncoderInterupt(Radial6.State, Ring6RadialEncoderChannelA, Ring6RadialEncoderChannelB, Radial6.Counter);
}

void Ring6RadialEncoderBInterrupt() { 
  Radial6 = EncoderInterupt(Radial6.State, Ring6RadialEncoderChannelA, Ring6RadialEncoderChannelB, Radial6.Counter);
}

void Ring6AxialEncoderAInterrupt() {
  Axial6 = EncoderInterupt(Axial6.State, Ring6AxialEncoderChannelA, Ring6AxialEncoderChannelB, Axial6.Counter);
}

void Ring6AxialEncoderBInterrupt() {
  Axial6 = EncoderInterupt(Axial6.State, Ring6AxialEncoderChannelA, Ring6AxialEncoderChannelB, Axial6.Counter);
}

Encoder EncoderInterupt(char State, int ChannelA, int ChannelB, long EncoderCounter) {
  char Previous = State;
  int A = digitalRead(ChannelA);
  int B = digitalRead(ChannelB);
  //Find encoder state
  if (A == HIGH && B == HIGH) {
    State = 'A';
  }
  else if (A == HIGH && B == LOW) {
    State = 'D';
  }
  else if (A == LOW && B == HIGH) {
    State = 'B';
  }
  else {
    State = 'C';
  }
  //Finds encoder direction using encoder states
  if (Previous == 'A') {
    if (State == 'B') {
      EncoderCounter++;
    }
    else if (State == 'D') {
      EncoderCounter--;
    }
  }
  else if (Previous == 'B') {
    if (State == 'C') {
      EncoderCounter++;
    }
    else if (State == 'A') {
      EncoderCounter--;
    }
  }
  else if (Previous == 'C') {
    if (State == 'D') {
      EncoderCounter++;
    }
    else if (State == 'B') {
      EncoderCounter--;
    }
  }
  else if (Previous == 'D') {
    if (State == 'A') {
     EncoderCounter++;
    }
    else if (State == 'C') {
      EncoderCounter--;
    }
  }
  //Serial.println(EncoderCounter);
  Encoder Temp{EncoderCounter, State};
  return Temp;
}

//This function runs the motor
void StepperMotor (int StepCount, const int dirPin, const int stepPin ) {
  if (StepCount > 0) {
    digitalWrite(dirPin,LOW); // Enables the motor to move in a particular direction
      }
  else if (StepCount < 0) {
    digitalWrite(dirPin,HIGH); // Enables the motor to move in a particular direction
      }
 // Makes 200 pulses for making one full cycle rotation
 StepCount = abs(StepCount);
    for(int x = 0; x < StepCount; x++) {
        digitalWrite(stepPin,HIGH);
        delay(DELAY);
        digitalWrite(stepPin,LOW);
        delay(DELAY);
    }
}

//The following is how far the motors need to move to get to their intended position
void ExecuteSteps(){
int AxialDesired5;
int AxialDesired52;
int RadialDesired5;
int RadialDesired6;
    if (Serial.available() > 0) {
    // read the incoming byte:
    AxialDesired5 = Serial.read();
  }
      if (Serial.available() > 0) {
    // read the incoming byte:
    AxialDesired52 = Serial.read();
  }
      if (Serial.available() > 0) {
    // read the incoming byte:
    RadialDesired5 = Serial.read();
  }
      if (Serial.available() > 0) {
    // read the incoming byte:
    RadialDesired6 = Serial.read();
  }

  int x = 0;
while(x==0){
  int Direction;
if (abs(AxialDesired5 - Axial5.Counter) > 2){
  if (AxialDesired5 - Axial5.Counter > 0){
    Direction = 1;
  }
  else{
    Direction = -1;
  }
  StepperMotor(Direction, Ring5AxialDir, Ring5AxialSteps);
}

if (abs(AxialDesired52 - Axial6.Counter) > 2){
  if (AxialDesired52 - Axial6.Counter > 0){
    Direction = 1;
  }
  else{
    Direction = -1;
  }
  StepperMotor(Direction, Ring6AxialDir, Ring6AxialSteps); //Motor will move
}

if (abs(RadialDesired5 - Radial5.Counter) > 2){
  if (RadialDesired5 - Radial5.Counter > 0){
    Direction = 10;
  }
  else{
    Direction = -10;
  }
StepperMotor(Direction, Ring5RadialDir, Ring5RadialSteps); //Motor Will move  
}

if (abs(RadialDesired6 - Radial6.Counter) > 2){
  if (RadialDesired6 - Radial6.Counter > 0){
    Direction = 10;
  }
  else{
    Direction = -10;
  }
  StepperMotor(Direction, Ring6RadialDir, Ring6RadialSteps); //Motor will move  
}
//if all encoders are within 2 steps of the desired position, end
//if (abs(AxialDesired5 - Axial5.Counter) <= 2 && abs(AxialDesired5 - Axial6.Counter) <= 2
//&& abs(AxialDesired5 - Radial5.Counter) <= 2 && abs(AxialDesired5 - Radial6.Counter) <= 2){
//  x=1;
//    Serial.print(Radial5.Counter);
//    Serial.print(Axial5.Counter);
//    Serial.print(Radial6.Counter);
//    Serial.print(Axial6.Counter);
//}
}
}

//StartUp function, this zeros the array and encoders
void StartUp (){
  while( Radial5.Counter && Axial5.Counter && Radial5.Counter && Axial5.Counter != 0){
    
  int PrevRadial5Counter = Radial5.Counter;
  if (Radial5.Counter != 0){
  StepperMotor (-2, Ring5RadialDir, Ring5RadialSteps );
  if (PrevRadial5Counter-Radial5.Counter >=1){
    Radial5.Counter=0;
  }
}

  int PrevRadial6Counter = Radial6.Counter;
  if (Radial6.Counter != 0){
  StepperMotor (-2, Ring6RadialDir, Ring6RadialSteps );
  if (PrevRadial6Counter-Radial6.Counter >=1){
    Radial6.Counter=0;
  }
}

  }
}

void loop() {
//ExecuteSteps();
//  Serial.println("EncoderCounter");
  StepperMotor (10, Ring6AxialDir, Ring6AxialSteps );
}
