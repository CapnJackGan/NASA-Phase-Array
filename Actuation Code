//This code is written for the Arduino DUE
//The purpose of this code is to take a user defined polar coordinate or preset and reconfigure an array to match those coordinates
/*Notable functions:
StepperMotor (int StepCount, const int dirPin, const int stepPin )
see Pinout chart for pins
*/

/*Code Structure:
-Variables
-Pinouts
-Setup
   -Pin Setup
   -Initiate Interupts
   -Serial Setup
   -Call StartUp
-Interupt Functions
-Define Interupt Function
-StepperMotor Function
-ExecuteSteps Function
   -Frequency Presets
   -Run to positions/control loop
-StartUp Function
*/

//Serial communications: Baud rate = 250000

struct Encoder {
  long Counter;
  char State;
};

//Variable encoder states
Encoder Radial5 = {0, 'A'};
Encoder Radial6 = {0, 'A'};
Encoder Axial5 = {0, 'A'};
Encoder Axial6 = {0, 'A'};

//Set Pins, see pinout chart
const int Ring5RadialSteps = 52; //Ring 5 Radial
const int Ring5RadialDir = 53;
const int Ring5RadialSleep = 51;
const int Ring5RadialEncoderChannelA = 49;
const int Ring5RadialEncoderChannelB = 50;

const int Ring5AxialSteps = 42; //Ring 5 Axial
const int Ring5AxialDir = 43;
const int Ring5AxialSleep = 41;
const int Ring5AxialEncoderChannelA = 44;
const int Ring5AxialEncoderChannelB = 45;
const int Ring5AxialEncoderIndex = 46;

const int Ring6RadialSteps = 12; //Ring 6 Radial
const int Ring6RadialDir = 11;
const int Ring6RadialSleep = 13;
const int Ring6RadialEncoderChannelA = 9;
const int Ring6RadialEncoderChannelB = 10;

const int Ring6AxialSteps = 3; //Ring 6 Axial
const int Ring6AxialDir = 2;
const int Ring6AxialSleep = 4;
const int Ring6AxialEncoderChannelA = 5;
const int Ring6AxialEncoderChannelB = 6;
const int Ring6AxialEncoderIndex = 7;

void setup() {
  //configure pins to input or output
  pinMode(Ring5RadialSteps, OUTPUT);
  pinMode(Ring5RadialDir, OUTPUT);
  pinMode(Ring5AxialSteps, OUTPUT);
  pinMode(Ring5AxialDir, OUTPUT);
  pinMode(Ring5RadialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring5RadialEncoderChannelB, INPUT_PULLUP);
  pinMode(Ring5AxialEncoderIndex, INPUT_PULLUP);
  pinMode(Ring5AxialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring5AxialEncoderChannelB, INPUT_PULLUP);
  pinMode(Ring6RadialSteps, OUTPUT);
  pinMode(Ring6RadialDir, OUTPUT);
  pinMode(Ring6AxialSteps, OUTPUT);
  pinMode(Ring6AxialDir, OUTPUT);
  pinMode(Ring6RadialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring6RadialEncoderChannelB, INPUT_PULLUP);
  pinMode(Ring6AxialEncoderIndex, INPUT_PULLUP);
  pinMode(Ring6AxialEncoderChannelA, INPUT_PULLUP);
  pinMode(Ring6AxialEncoderChannelB, INPUT_PULLUP);
  
  //initiate encoder interupts
  attachInterrupt(digitalPinToInterrupt(Ring5RadialEncoderChannelA), Ring5RadialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5RadialEncoderChannelB), Ring5RadialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5AxialEncoderChannelA), Ring5AxialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5AxialEncoderChannelB), Ring5AxialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6RadialEncoderChannelA), Ring6RadialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6RadialEncoderChannelB), Ring6RadialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6AxialEncoderChannelA), Ring6AxialEncoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6AxialEncoderChannelB), Ring6AxialEncoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring5AxialEncoderIndex), Hello, CHANGE);
  attachInterrupt(digitalPinToInterrupt(Ring6AxialEncoderIndex), Hello, CHANGE);

  //Iniatiate serial port
  Serial.begin(250000);

//Launch Startup Sequence
  //StartUp(5,"r");
  StepperMotor (-4000, Ring6RadialDir, Ring6RadialSteps );
  //ExecuteSteps("Radial6", 3200);
}

//Encoder interupts
int Homed5 = 0;
int Homed6 = 0;

void Home5(){
  Homed5=1;
}

void Home6(){
  Homed6=1;
}

void Hello(){
  //Serial.println("Hello!!!!!!!!!!!");
}
void Ring5RadialEncoderAInterrupt() {
  Radial5 = EncoderInterupt(Radial5.State, Ring5RadialEncoderChannelA, Ring5RadialEncoderChannelB, Radial5.Counter);
}

void Ring5RadialEncoderBInterrupt() { 
  Radial5 = EncoderInterupt(Radial5.State, Ring5RadialEncoderChannelA, Ring5RadialEncoderChannelB, Radial5.Counter);
}

void Ring5AxialEncoderAInterrupt() {
  Axial5 = EncoderInterupt(Axial5.State, Ring5AxialEncoderChannelA, Ring5AxialEncoderChannelB, Axial5.Counter);
}

void Ring5AxialEncoderBInterrupt() {
  Axial5 = EncoderInterupt(Axial5.State, Ring5AxialEncoderChannelA, Ring5AxialEncoderChannelB, Axial5.Counter);
}

//Ring 2 interupts
void Ring6RadialEncoderAInterrupt() {
  Radial6 = EncoderInterupt(Radial6.State, Ring6RadialEncoderChannelA, Ring6RadialEncoderChannelB, Radial6.Counter);
}

void Ring6RadialEncoderBInterrupt() { 
  Radial6 = EncoderInterupt(Radial6.State, Ring6RadialEncoderChannelA, Ring6RadialEncoderChannelB, Radial6.Counter);
}

void Ring6AxialEncoderAInterrupt() {
  Axial6 = EncoderInterupt(Axial6.State, Ring6AxialEncoderChannelA, Ring6AxialEncoderChannelB, Axial6.Counter);
}

void Ring6AxialEncoderBInterrupt() {
  Axial6 = EncoderInterupt(Axial6.State, Ring6AxialEncoderChannelA, Ring6AxialEncoderChannelB, Axial6.Counter);
}

Encoder EncoderInterupt(char State, int ChannelA, int ChannelB, long EncoderCounter) {
  char Previous = State;
  int A = digitalRead(ChannelA);
  int B = digitalRead(ChannelB);
  //Find encoder state
  if (A == HIGH && B == HIGH) {
    State = 'A';
  }
  else if (A == HIGH && B == LOW) {
    State = 'D';
  }
  else if (A == LOW && B == HIGH) {
    State = 'B';
  }
  else {
    State = 'C';
  }
  //Finds encoder direction using encoder states
  if (Previous == 'A') {
    if (State == 'B') {
      EncoderCounter--;
    }
    else if (State == 'D') {
      EncoderCounter++;
    }
  }
  else if (Previous == 'B') {
    if (State == 'C') {
      EncoderCounter--;
    }
    else if (State == 'A') {
      EncoderCounter++;
    }
  }
  else if (Previous == 'C') {
    if (State == 'D') {
      EncoderCounter--;
    }
    else if (State == 'B') {
      EncoderCounter++;
    }
  }
  else if (Previous == 'D') {
    if (State == 'A') {
     EncoderCounter--;
    }
    else if (State == 'C') {
      EncoderCounter++;
    }
  }
  Serial.println(EncoderCounter);
  Encoder Temp{EncoderCounter, State};
  return Temp;
}

//This function runs the motor
void StepperMotor (int StepCount, const int dirPin, const int stepPin ) {
int DELAY;
if (dirPin ==  Ring5RadialDir||dirPin == Ring6RadialDir){
DELAY=2; //delay between steps in miliseconds for radial expansion
}
if (dirPin ==  Ring5AxialDir||dirPin == Ring6AxialDir){
DELAY=20; //delay between steps in miliseconds for axial rotation
}
  if (StepCount > 0) {
    digitalWrite(dirPin,LOW); // Enables the motor to move in a particular direction
      }
  else if (StepCount < 0) {
    digitalWrite(dirPin,HIGH); // Enables the motor to move in a particular direction
      }
 // Makes 200 pulses for making one full cycle rotation
 StepCount = abs(StepCount);
    for(int x = 0; x < StepCount; x++) {
        digitalWrite(stepPin,HIGH);
        delay(DELAY);
        digitalWrite(stepPin,LOW);
        delay(DELAY);
    }
}

//The following is how far the motors need to move to get to their intended position
void ExecuteSteps(String Selection, int Desired){
  long Counter;
  int Dir;
  int Steps;
  if (Selection == "Axial5"){
    Counter = Axial5.Counter;
    Dir = Ring5AxialDir;
    Steps = Ring5AxialSteps;
  }
  else if (Selection == "Axial6"){
    Counter = Axial6.Counter;
    Dir = Ring6AxialDir;
    Steps = Ring6AxialSteps;
  }
  else if (Selection == "Radial5"){
    Counter = Radial5.Counter;
    Dir = Ring5RadialDir;
    Steps = Ring5RadialSteps;
  }
  else if (Selection == "Radial6"){
    Counter = Radial6.Counter;
    Dir = Ring6RadialDir;
    Steps = Ring6RadialSteps;
  }
  
while (abs(Desired - Counter) > 3){
  int Direction;
  if (Desired - Counter > 0){
    Direction = 1;
  }
  else{
    Direction = -1;
  }
  StepperMotor(Direction, Dir, Steps);
}
}

//StartUp function, this zeros the array and encoders
void StartUp (int Ring, String Dir){
  int Homed = 0;
    if (Dir == "a"){
      if (Ring == 5){
        Serial.print("Started");
  StepperMotor (-200, Ring5AxialDir, Ring5AxialSteps);
  Homed5=0;
  while( Homed != 1){
    Serial.print("In while");
  if (Homed5 == 0){
    Serial.print("In if");
  StepperMotor (1, Ring5AxialDir, Ring5AxialSteps );
}
else if (Homed5 == 1){
  //StepperMotor (x, Ring5AxialDir, Ring5AxialSteps ); //edit x so that home is vertical
  Axial5.Counter=0;
    Homed = 1;
}
      }
      }
      if (Ring == 6) {
  StepperMotor (-200, Ring6AxialDir, Ring6AxialSteps );
  Homed6=0; 
  while( Homed != 1){
if (Homed6 == 0){
  StepperMotor (1, Ring6AxialDir, Ring6AxialSteps );
}
else if (Homed6 == 1){
  //StepperMotor (x, Ring5AxialDir, Ring5AxialSteps ); //edit x so that home is vertical
  Axial6.Counter=0;
    Homed = 1;
} 
  }
    }
    }

    if (Dir == "r"){
      if (Ring == 5){
  while (Radial5.Counter != 0){
  int PrevRadial5Counter = Radial5.Counter;
  StepperMotor (-4, Ring5RadialDir, Ring5RadialSteps );
  if (PrevRadial5Counter-Radial5.Counter == 0){
    Radial5.Counter=0;
    Homed = 1;
  }
}
      }
      if (Ring == 6){
  while (Radial6.Counter != 0){
  int PrevRadial6Counter = Radial6.Counter;
  StepperMotor (-4, Ring6RadialDir, Ring6RadialSteps );
  if (PrevRadial6Counter-Radial6.Counter == 0){
    Radial6.Counter=0;
    Homed = 1;
  }
}
      }
    }
}

void loop() {
//  StepperMotor (1, Ring5RadialDir, Ring5RadialSteps );
  
  char MATLAB;
  if (Serial.available() > 0) {
    MATLAB = Serial.read(); //reads user input from matlab
  
  
  switch (MATLAB){
    case 'c'://codeRequest, handshake protocol
    Serial.println("ArdCode_c71aba6");
    break;
    
    case 'h': //Homing protocol
//    if (Serial.available() > 0) {
{
      delay(1000);
      String Homing = Serial.readString(); //reads user input from matlab
      int Ring = Homing.substring(1,2).toInt();
      String Dir = Homing.substring(3,4);
      StartUp(Ring, Dir);
      Serial.println("done");
//    }
  }
    break;

    case 'm'://Manual control
    {
      delay(1000);
    String Move = Serial.readString(); //reads user input from matlab
    int Ring = Move.substring(1,2).toInt();
    String Dir = Move.substring(3,4);
    int Negative = Move.substring(4,5).toInt();
    int Distance = Move.substring(6,12).toInt();
    int Steps;
//    if (Negative == 0){
//      Distance = Distance*-1;
//    }
    if (Ring == 5 && Dir == "a"){
      Steps = Distance/.225/10000;//.225 degrees per encoder step, input in degrees*10^-4
      ExecuteSteps("Axial5", Steps);
    }
    else if (Ring == 6 && Dir == "a"){
      Steps = Distance/.225/10000;//.225 degrees per encoder step, input in degrees*10^-4
      ExecuteSteps("Axial6", Steps);
    }
    else if (Ring == 5 && Dir == "r"){
      Steps = Distance*20*1600/10000; //1600 steps per rev, 20 rev per Inch, input in Inches*10^-4
      ExecuteSteps("Radial5", Steps);
    }
     else if (Ring == 6 && Dir == "r"){
      Steps = Distance*20*1600/10000; //1600 steps per rev, 20 rev per Inch, input in Inches*10^-4
      ExecuteSteps("Radial6", Steps);
    }
    Serial.println("done");
    }
    break;

    case 'a'://Automatic control/presets
    {
      delay(1000);
    String Move = Serial.readString();
    int NegativeAx = Move.substring(4,5).toInt();
    int DistanceAx = Move.substring(6,12).toInt();
    int NegativeRad = Move.substring(14,15).toInt();
    int DistanceRad = Move.substring(16,22).toInt();
    int Steps = DistanceAx/.225/10000;//.225 degrees per encoder step, input in degrees*10^-4
//    if (NegativeAx == 0){
//      Steps = Steps*-1;
//    }
      ExecuteSteps("Axial6", Steps);
      Steps = DistanceRad*20*1600/10000; //1600 steps per rev, 20 rev per Inch, input in Inches*10^-4
//    if (NegativeRad == 0){
//      Steps = Steps*-1;
//    }
      ExecuteSteps("Radial6", Steps);
    }
    Serial.println("done");
    
    {
      delay(1000);
    String Move = Serial.readString();
    int NegativeAx = Move.substring(4,5).toInt();
    int DistanceAx = Move.substring(6,12).toInt();
    int NegativeRad = Move.substring(14,15).toInt();
    int DistanceRad = Move.substring(16,22).toInt();
    int Steps = DistanceAx/.225/10000;//.225 degrees per encoder step, input in degrees*10^-4
    if (NegativeAx == 0){
      Steps = Steps*-1;
    }
      ExecuteSteps("Axial5", Steps);
      Steps = DistanceRad*20*1600/10000; //1600 steps per rev, 20 rev per Inch, input in Inches*10^-4
    if (NegativeRad == 0){
      Steps = Steps*-1;
    }
      ExecuteSteps("Radial5", Steps);
    
    Serial.println("done");
    }
    break;

    case 'p'://Position query
    {
    long Output;
    Output = Radial5.Counter/20/1600; //20 pitch, 1600 steps per revolution
    Serial.println(Output);
    
    Output = Axial5.Counter*360/3/1600; //3:1 gear ratio, 1600 steps per revolution
    Serial.println(Output);
    
    Output = Radial6.Counter/20/1600; //20 pitch, 1600 steps per revolution
    Serial.println(Output); 
    
    Output = Axial6.Counter*360/3/1600; //3:1 gear ratio, 1600 steps per revolution
    Serial.println(Output);
    }
    break;
  }
  }
}
